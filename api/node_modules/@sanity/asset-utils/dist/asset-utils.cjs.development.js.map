{"version":3,"file":"asset-utils.cjs.development.js","sources":["../src/hotspotCrop.ts","../src/utils.ts","../src/constants.ts","../src/asserters.ts","../src/paths.ts","../src/parse.ts","../src/resolve.ts","../src/urls.ts"],"sourcesContent":["import type {SanityImageCrop, SanityImageHotspot} from './types'\n\n/**\n * Default crop (equals to \"whole image\")\n */\nexport const DEFAULT_CROP: Readonly<SanityImageCrop> = Object.freeze({\n  left: 0,\n  top: 0,\n  bottom: 0,\n  right: 0,\n})\n\n/**\n * Default hotspot (equals to horizontal/vertical center, full size of image)\n */\nexport const DEFAULT_HOTSPOT: Readonly<SanityImageHotspot> = Object.freeze({\n  x: 0.5,\n  y: 0.5,\n  height: 1,\n  width: 1,\n})\n\n/**\n * Returns cloned version of the default crop (prevents accidental mutations)\n *\n * @returns Default image crop object\n */\nexport const getDefaultCrop = (): SanityImageCrop => ({...DEFAULT_CROP})\n\n/**\n * Returns cloned version of the default hotspot (prevents accidental mutations)\n *\n * @returns Default image hotspot object\n */\nexport const getDefaultHotspot = (): SanityImageHotspot => ({...DEFAULT_HOTSPOT})\n\n/**\n * Returns whether or not the passed crop has the default values for a crop region\n *\n * @param crop The crop to return whether or not is the default crop\n * @returns True if passed crop matches default, false otherwise\n */\nexport const isDefaultCrop = (crop: SanityImageCrop): boolean => {\n  const {top, bottom, left, right} = crop\n  const {\n    top: defaultTop,\n    bottom: defaultBottom,\n    left: defaultLeft,\n    right: defaultRight,\n  } = DEFAULT_CROP\n\n  return (\n    top === defaultTop && bottom === defaultBottom && left === defaultLeft && right === defaultRight\n  )\n}\n\n/**\n * Returns whether or not the passed hotspot has the default values for a hotspot region\n *\n * @param hotspot The hotspot to return whether or not is the default hotspot\n * @returns True if passed hotspot matches default, false otherwise\n */\nexport const isDefaultHotspot = (hotspot: SanityImageHotspot): boolean => {\n  const {x, y, width, height} = hotspot\n  const {x: defaultX, y: defaultY, width: defaultWidth, height: defaultHeight} = DEFAULT_HOTSPOT\n\n  return x === defaultX && y === defaultY && width === defaultWidth && height === defaultHeight\n}\n","/**\n * @internal\n */\nexport type MethodReturnType<T> = T extends (...args: unknown[]) => infer R ? R : any // eslint-disable-line @typescript-eslint/no-explicit-any\n\n/**\n * @internal\n */\nexport type ArgumentTypes<F extends Function> = F extends (...args: infer A) => unknown ? A : never\n\n/**\n * Error type thrown when the library fails to resolve a value, such as an asset ID,\n * filename or project ID/dataset information.\n *\n * The `input` property holds the value passed as the input, which failed to be\n * resolved to something meaningful.\n */\nexport class UnresolvableError extends Error {\n  unresolvable = true\n\n  // The input may not be a valid source, so let's not type it as one\n  input?: unknown\n\n  constructor(inputSource: unknown, message = 'Failed to resolve asset ID from source') {\n    super(message)\n    this.input = inputSource\n  }\n}\n\n/**\n * Checks whether or not an error instance is of type UnresolvableError\n *\n * @param err - Error to check for unresolvable error type\n * @returns True if the passed error instance appears to be an unresolveable error\n */\nexport function isUnresolvableError(err: unknown): err is UnresolvableError {\n  const error = err as UnresolvableError\n  return Boolean(error.unresolvable && 'input' in error)\n}\n\n/**\n * Returns a getter which returns `undefined` instead of throwing,\n * if encountering an `UnresolvableError`\n *\n * @param method - Function to use as resolver\n * @returns Function that returns `undefined` if passed resolver throws UnresolvableError\n * @internal\n */\nexport function getForgivingResolver<T extends Function>(method: T) {\n  return function (...args: ArgumentTypes<T>): MethodReturnType<T> | undefined {\n    try {\n      return method(...args)\n    } catch (err) {\n      if (isUnresolvableError(err)) {\n        return undefined\n      }\n\n      throw err\n    }\n  }\n}\n","/**\n * @internal\n */\nexport const cdnUrl = 'https://cdn.sanity.io'\n\n/**\n * @internal\n */\nexport const cdnUrlPattern = /^https:\\/\\/cdn\\.sanity\\./\n\n/**\n * @internal\n */\nexport const fileAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const fileAssetIdPattern = /^file-([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})-\\d+x\\d+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetIdPattern = /^image-([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\\d+x\\d+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const assetFilenamePattern =\n  /^(([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+|([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\\d+x\\d+\\.[a-z0-9]+)$/\n\n/**\n * @internal\n */\nexport const pathPattern = /^(images|files)\\/([a-z0-9]+)\\/([a-z0-9][-\\w]*)\\//\n\n/**\n * @internal\n */\nexport const idPattern =\n  /^(?:image-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\\d+x\\d+-[a-z0-9]+|file-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-[a-z0-9]+)$/\n\n/**\n * For use in cases where the project and dataset doesn't really matter\n *\n * @internal\n */\nexport const dummyProject = {projectId: 'a', dataset: 'b'}\n","import {fileAssetIdPattern, imageAssetIdPattern} from './constants'\nimport type {\n  SanityAssetIdStub,\n  SanityAssetObjectStub,\n  SanityAssetPathStub,\n  SanityAssetUrlStub,\n  SanityFileAsset,\n  SanityImageAsset,\n  SanityReference,\n} from './types'\n\n/**\n * Checks whether or not the given source is a Sanity reference\n * (an object containing _ref string key)\n *\n * @param ref - Possible reference\n * @returns Whether or not the passed object is a reference\n */\nexport function isReference(ref: unknown): ref is SanityReference {\n  return isObject(ref) && typeof (ref as SanityReference)._ref === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset ID stub\n * (an object containing an `_id` property)\n *\n * @param stub - Possible asset id stub\n * @returns Whether or not the passed object is an object id stub\n */\nexport function isAssetIdStub(stub: unknown): stub is SanityAssetIdStub {\n  return isObject(stub) && typeof (stub as SanityAssetIdStub)._id === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset path stub\n * (an object containing a `path` property)\n *\n * @param stub - Possible asset path stub\n * @returns Whether or not the passed object is an object path stub\n */\nexport function isAssetPathStub(stub: unknown): stub is SanityAssetPathStub {\n  return isObject(stub) && typeof (stub as SanityAssetPathStub).path === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset URL stub\n * (an object containing a `url` property)\n *\n * @param stub - Possible asset url stub\n * @returns Whether or not the passed object is an object url stub\n */\nexport function isAssetUrlStub(stub: unknown): stub is SanityAssetUrlStub {\n  return isObject(stub) && typeof (stub as SanityAssetUrlStub).url === 'string'\n}\n\n/**\n * Checks whether or not the given source is a (partial) sanity file asset document.\n * Only checks the `_type` property, all other properties _may_ be missing\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file asset\n */\nexport function isSanityFileAsset(src: unknown): src is SanityFileAsset {\n  return isObject(src) && (src as SanityFileAsset)._type === 'sanity.fileAsset'\n}\n\n/**\n * Checks whether or not the given source is a (partial) sanity image asset document.\n * Only checks the `_type` property, all other properties _may_ be missing\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file asset\n */\nexport function isSanityImageAsset(src: unknown): src is SanityImageAsset {\n  return isObject(src) && (src as SanityImageAsset)._type === 'sanity.imageAsset'\n}\n\n/**\n * Checks whether or not the given document ID is a valid Sanity image asset document ID\n *\n * @param documentId - Document ID to check\n * @returns Whether or not the given document ID is a Sanity image asset document ID\n */\nexport function isImageAssetId(documentId: string): boolean {\n  return imageAssetIdPattern.test(documentId)\n}\n\n/**\n * Checks whether or not the given document ID is a valid Sanity file asset document ID\n *\n * @param documentId - Document ID to check\n * @returns Whether or not the given document ID is a Sanity file asset document ID\n */\nexport function isFileAssetId(documentId: string): boolean {\n  return fileAssetIdPattern.test(documentId)\n}\n\n/**\n * Checks whether or not the given document ID is a valid Sanity asset document ID (file or image)\n *\n * @param documentId - Document ID to check\n * @returns Whether or not the given document ID is a Sanity asset document ID (file or image)\n */\nexport function isAssetId(documentId: string): boolean {\n  return isImageAssetId(documentId) || isFileAssetId(documentId)\n}\n\n/**\n * Checks whether or not the given source is an asset object stub\n *\n * @param stub - Possible asset object stub\n * @returns Whether or not the passed object is an object stub\n */\nexport function isAssetObjectStub(stub: unknown): stub is SanityAssetObjectStub {\n  const item = stub as SanityAssetObjectStub\n  return isObject(item) && item.asset && typeof item.asset === 'object'\n}\n\n/**\n * Checks whether or not the passed object is an object (and not `null`)\n *\n * @param obj Item to check whether or not is an object\n * @returns Whether or not `obj` is an object\n * @internal\n */\nexport function isObject(obj: unknown): obj is object {\n  return obj !== null && !Array.isArray(obj) && typeof obj === 'object'\n}\n","import type {\n  FileUrlBuilderOptions,\n  ImageUrlBuilderOptions,\n  PathBuilderOptions,\n  SanityAssetSource,\n  SanityFileUrlParts,\n  SanityImageUrlParts,\n} from './types'\nimport {\n  cdnUrl,\n  cdnUrlPattern,\n  fileAssetFilenamePattern,\n  imageAssetFilenamePattern,\n  pathPattern,\n} from './constants'\nimport {isAssetObjectStub, isAssetPathStub, isAssetUrlStub, isReference} from './asserters'\nimport {getForgivingResolver, UnresolvableError} from './utils'\n\n/**\n * Builds the base image path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param options - Project ID and dataset the image belongs to, along with other options\n * @return string\n */\nexport function buildImagePath(\n  asset: ImageUrlBuilderOptions | SanityImageUrlParts,\n  options?: PathBuilderOptions\n): string {\n  const projectId = options?.projectId || asset.projectId\n  const dataset = options?.dataset || asset.dataset\n  if (!projectId || !dataset) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for image')\n  }\n\n  const dimensions =\n    'metadata' in asset ? asset.metadata.dimensions : {width: asset.width, height: asset.height}\n  const originalFilename = 'originalFilename' in asset ? asset.originalFilename : undefined\n  const {assetId, extension, vanityFilename} = asset\n  const {width, height} = dimensions\n  const vanity = getVanityStub(originalFilename, vanityFilename, options)\n\n  return `images/${projectId}/${dataset}/${assetId}-${width}x${height}.${extension}${vanity}`\n}\n\n/**\n * Builds the base image URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param options - Project ID and dataset the image belongs to\n * @return string\n */\nexport function buildImageUrl(\n  asset: ImageUrlBuilderOptions | SanityImageUrlParts,\n  options?: PathBuilderOptions\n): string {\n  return `${cdnUrl}/${buildImagePath(asset, options)}`\n}\n\n/**\n * Builds the base file path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param options - Project ID and dataset the file belongs to, along with other options\n * @return string\n */\nexport function buildFilePath(\n  asset: FileUrlBuilderOptions | SanityFileUrlParts,\n  options?: PathBuilderOptions\n): string {\n  const projectId = options?.projectId || asset.projectId\n  const dataset = options?.dataset || asset.dataset\n  if (!projectId || !dataset) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for file')\n  }\n\n  const originalFilename = 'originalFilename' in asset ? asset.originalFilename : undefined\n  const {assetId, extension, vanityFilename} = asset\n  const vanity = getVanityStub(originalFilename, vanityFilename, options)\n\n  return `files/${projectId}/${dataset}/${assetId}.${extension}${vanity}`\n}\n\n/**\n * Builds the base file URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID and extension\n * @param options - Project ID and dataset the file belongs to, along with other options\n * @return string\n */\nexport function buildFileUrl(asset: FileUrlBuilderOptions, project?: PathBuilderOptions): string {\n  return `${cdnUrl}/${buildFilePath(asset, project)}`\n}\n\n/**\n * Checks whether or not the given URL contains an asset path\n *\n * @param url - URL or path name\n * @returns Whether or not it contained an asset path\n */\nfunction hasPath(urlOrPath: string): boolean {\n  return pathPattern.test(tryGetUrlPath(urlOrPath) || '')\n}\n\n/**\n * Tries to get the asset path from a given asset source\n *\n * @param src - The source image to infer an asset path from\n * @returns A path if resolvable, undefined otherwise\n */\nexport function tryGetAssetPath(src: SanityAssetSource): string | undefined {\n  if (isAssetObjectStub(src)) {\n    return tryGetAssetPath(src.asset)\n  }\n\n  if (isReference(src)) {\n    return undefined\n  }\n\n  if (typeof src === 'string') {\n    return hasPath(src) ? getUrlPath(src) : undefined\n  }\n\n  if (isAssetPathStub(src)) {\n    return src.path\n  }\n\n  if (isAssetUrlStub(src)) {\n    return getUrlPath(src.url)\n  }\n\n  return undefined\n}\n\n/**\n * Strips the CDN URL and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `images/project/dataset/filename-200x200.jpg`\n *\n * @param url - URL to get path name from\n * @returns The path of a CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlPath(url: string): string {\n  if (pathPattern.test(url)) {\n    // Already just a path\n    return url\n  }\n\n  if (!cdnUrlPattern.test(url)) {\n    throw new UnresolvableError(`Failed to resolve path from URL \"${url}\"`)\n  }\n\n  return new URL(url).pathname.replace(/^\\/+/, '')\n}\n\n/**\n * See {@link getUrlPath}\n *\n * @inheritFrom {@link getUrlPath}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlPath = getForgivingResolver(getUrlPath)\n\n/**\n * Strips the CDN URL, path and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `filename-200x200.jpg`\n *\n * @param url - URL to get filename from\n * @returns The filename of an URL, if URL matches the CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlFilename(url: string): string {\n  const path = tryGetUrlPath(url) || url\n  const filename = path.replace(/^(images|files)\\/[a-z0-9]+\\/[a-z0-9][-\\w]\\/*/, '')\n  if (!isValidFilename(filename)) {\n    throw new UnresolvableError(`Failed to resolve filename from URL \"${url}\"`)\n  }\n\n  return filename\n}\n\n/**\n * See {@link getUrlFilename}\n *\n * @inheritFrom {@link getUrlFilename}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlFilename = getForgivingResolver(getUrlFilename)\n\n/**\n * Checks whether or not a given filename matches the expected Sanity asset filename pattern\n *\n * @param filename - Filename to check for validity\n * @returns Whether or not the specified filename is valid\n */\nexport function isValidFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename) || imageAssetFilenamePattern.test(filename)\n}\n\n/**\n * Get the \"path stub\" at the end of the path, if the user hasn't explicitly opted out of this behavior\n */\nexport function getVanityStub(\n  originalFilename: string | undefined,\n  vanityFilename: string | undefined,\n  options?: PathBuilderOptions\n): string {\n  const vanity = vanityFilename || originalFilename\n  return options?.useVanityName === false || !vanity ? '' : `/${vanity}`\n}\n","import type {\n  SanityAssetIdParts,\n  SanityFileAssetIdParts,\n  SanityImageAssetIdParts,\n  SanityAssetUrlParts,\n  SanityFileUrlParts,\n  SanityImageUrlParts,\n} from './types'\nimport {\n  cdnUrlPattern,\n  fileAssetIdPattern,\n  imageAssetFilenamePattern,\n  imageAssetIdPattern,\n  pathPattern,\n} from './constants'\nimport {tryGetUrlFilename, isValidFilename} from './paths'\n\n/**\n * @internal\n */\nconst exampleFileId = 'file-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-pdf'\n\n/**\n * @internal\n */\nconst exampleImageId = 'image-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-2000x3000-jpg'\n\n/**\n * Parses a Sanity asset document ID into individual parts (type, id, extension, width/height etc)\n *\n * @param documentId - Document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID is invalid\n */\nexport function parseAssetId(documentId: string): SanityAssetIdParts {\n  if (imageAssetIdPattern.test(documentId)) {\n    return parseImageAssetId(documentId)\n  }\n\n  if (fileAssetIdPattern.test(documentId)) {\n    return parseFileAssetId(documentId)\n  }\n\n  throw new Error(`Invalid image/file asset ID: ${documentId}`)\n}\n\n/**\n * Parses a Sanity file asset document ID into individual parts (type, id, extension)\n *\n * @param documentId - File asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseFileAssetId(documentId: string): SanityFileAssetIdParts {\n  if (!fileAssetIdPattern.test(documentId)) {\n    throw new Error(\n      `Malformed file asset ID '${documentId}'. Expected an id like \"${exampleFileId}\"`\n    )\n  }\n\n  const [, assetId, extension] = documentId.split('-')\n  return {type: 'file', assetId, extension}\n}\n\n/**\n * Parses a Sanity image asset document ID into individual parts (type, id, extension, width, height)\n *\n * @param documentId - Image asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseImageAssetId(documentId: string): SanityImageAssetIdParts {\n  const [, assetId, dimensionString, extension] = documentId.split('-')\n  const [width, height] = (dimensionString || '').split('x').map(Number)\n\n  if (!assetId || !dimensionString || !extension || !(width > 0) || !(height > 0)) {\n    throw new Error(`Malformed asset ID '${documentId}'. Expected an id like \"${exampleImageId}\".`)\n  }\n\n  return {type: 'image', assetId, width, height, extension}\n}\n\n/**\n * Parses a Sanity asset filename into individual parts (type, id, extension, width, height)\n *\n * @param filename - Filename to parse into named parts\n * @returns Object of named properties\n * @throws If image/filename is invalid\n */\nexport function parseAssetFilename(filename: string): SanityAssetIdParts {\n  const file = tryGetUrlFilename(filename) || ''\n  if (!isValidFilename(file)) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n\n  try {\n    const type = imageAssetFilenamePattern.test(file) ? 'image' : 'file'\n    const assetId = file.replace(/\\.([a-z0-9+]+)$/i, '-$1')\n    return parseAssetId(`${type}-${assetId}`)\n  } catch (err) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n}\n\n/**\n * Parses a full Sanity asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity asset URL\n */\nexport function parseAssetUrl(url: string): SanityAssetUrlParts {\n  if (!cdnUrlPattern.test(url)) {\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`)\n  }\n\n  const path = new URL(url).pathname.replace(/^\\/+/, '')\n  const [projectPath, , projectId, dataset] = path.match(pathPattern) || []\n  if (!projectPath || !projectId || !dataset) {\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`)\n  }\n\n  const [filename, vanityFilename] = path.slice(projectPath.length).split('/')\n  const parsed = parseAssetFilename(filename)\n\n  return {\n    ...parsed,\n    projectId,\n    dataset,\n    vanityFilename,\n  }\n}\n\n/**\n * Parses a full Sanity image asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity image asset URL\n */\nexport function parseImageAssetUrl(url: string): SanityImageUrlParts {\n  const parsed = parseAssetUrl(url)\n  if (parsed.type !== 'image') {\n    throw new Error(`URL is not a valid Sanity image asset URL: ${url}`)\n  }\n\n  return parsed\n}\n\n/**\n * Parses a full Sanity file asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity file asset URL\n */\nexport function parseFileAssetUrl(url: string): SanityFileUrlParts {\n  const parsed = parseAssetUrl(url)\n  if (parsed.type !== 'file') {\n    throw new Error(`URL is not a valid Sanity file asset URL: ${url}`)\n  }\n\n  return parsed\n}\n\n/**\n * Validates that a given URL is a Sanity asset URL, and returns the asset type if valid.\n *\n * @param url URL to extract asset type from\n * @returns Asset type if valid URL, false otherwise\n * @internal\n */\nexport function getAssetUrlType(url: string): 'image' | 'file' | false {\n  try {\n    return parseAssetUrl(url).type\n  } catch (err) {\n    return false\n  }\n}\n","import type {\n  PathBuilderOptions,\n  ResolvedSanityFile,\n  ResolvedSanityImage,\n  SanityAssetSource,\n  SanityFileAsset,\n  SanityFileObjectStub,\n  SanityFileSource,\n  SanityImageAsset,\n  SanityImageDimensions,\n  SanityImageObjectStub,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport {getDefaultCrop, getDefaultHotspot} from './hotspotCrop'\nimport {getForgivingResolver, UnresolvableError} from './utils'\nimport {parseImageAssetId, parseFileAssetId} from './parse'\nimport {\n  isAssetIdStub,\n  isAssetObjectStub,\n  isAssetPathStub,\n  isAssetUrlStub,\n  isReference,\n  isSanityFileAsset,\n  isSanityImageAsset,\n} from './asserters'\nimport {\n  cdnUrl,\n  cdnUrlPattern,\n  dummyProject,\n  fileAssetFilenamePattern,\n  idPattern,\n  imageAssetFilenamePattern,\n  pathPattern,\n} from './constants'\nimport {\n  buildFilePath,\n  buildFileUrl,\n  buildImagePath,\n  buildImageUrl,\n  getUrlPath,\n  tryGetAssetPath,\n} from './paths'\n\n/**\n * Returns the width, height and aspect ratio of a passed image asset, from any\n * inferrable structure (id, url, path, asset document, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @returns Object with width, height and aspect ratio properties\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageDimensions(src: SanityImageSource): SanityImageDimensions {\n  const imageId = getAssetDocumentId(src)\n  const {width, height} = parseImageAssetId(imageId)\n  const aspectRatio = width / height\n  return {width, height, aspectRatio}\n}\n\n/**\n * See {@link getImageDimensions}\n *\n * @inheritFrom {@link getImageDimensions}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageDimensions = getForgivingResolver(getImageDimensions)\n\n/**\n * Returns the file extension for a given asset\n *\n * @param src - Input source (file/image object, asset, reference, id, url, path)\n * @returns The file extension, if resolvable (no `.` included)\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset ID\n */\nexport function getExtension(src: SanityAssetSource): string {\n  return isFileSource(src)\n    ? getFile(src, dummyProject).asset.extension\n    : getImage(src, dummyProject).asset.extension\n}\n\n/**\n * See {@link getExtension}\n *\n * @inheritFrom {@link getExtension}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetExtension = getForgivingResolver(getExtension)\n\n/**\n * Tries to resolve an image object with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project Project ID and dataset the image belongs to\n * @returns Image object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImage(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): ResolvedSanityImage {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getImageAsset(src, projectDetails)\n\n  const img = src as SanityImageObjectStub\n  return {\n    asset,\n    crop: img.crop || getDefaultCrop(),\n    hotspot: img.hotspot || getDefaultHotspot(),\n  }\n}\n\n/**\n * See {@link getImage}\n *\n * @inheritFrom {@link getImage}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImage = getForgivingResolver(getImage)\n\n/**\n * Tries to resolve a (partial) image asset document with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project - Project ID and dataset the image belongs to\n * @returns Image asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageAsset(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): SanityImageAsset {\n  const projectDetails = project || getProject(src)\n  const pathOptions: PathBuilderOptions = {...projectDetails, useVanityName: false}\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityImageObjectStub\n  const source = (sourceObj.asset || src) as SanityImageAsset\n  const metadata = source.metadata || {}\n  const {assetId, width, height, extension} = parseImageAssetId(_id)\n  const aspectRatio = width / height\n  const baseAsset: SanityImageAsset = {\n    ...(isSanityImageAsset(src) ? src : {}),\n    _id,\n    _type: 'sanity.imageAsset',\n    assetId,\n    extension,\n    metadata: {\n      ...metadata,\n      dimensions: {width, height, aspectRatio},\n    },\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildImagePath(baseAsset, pathOptions),\n    url: buildImageUrl(baseAsset, pathOptions),\n  }\n}\n\n/**\n * See {@link getImageAsset}\n *\n * @inheritFrom {@link getImageAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageAsset = getForgivingResolver(getImageAsset)\n\n/**\n * Tries to resolve an file object with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param project Project ID and dataset the file belongs to\n * @returns File object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFile(src: SanityFileSource, project?: SanityProjectDetails): ResolvedSanityFile {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getFileAsset(src, projectDetails)\n  return {asset}\n}\n\n/**\n * See {@link getFile}\n *\n * @inheritFrom {@link getFile}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFile = getForgivingResolver(getFile)\n\n/**\n * Tries to resolve a (partial) file asset document with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param options - Project ID and dataset the file belongs to, along with other options\n * @returns File asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFileAsset(src: SanityFileSource, options?: PathBuilderOptions): SanityFileAsset {\n  const projectDetails: PathBuilderOptions = {...(options || getProject(src)), useVanityName: false}\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityFileObjectStub\n  const source = (sourceObj.asset || src) as SanityFileAsset\n  const {assetId, extension} = parseFileAssetId(_id)\n  const baseAsset: SanityFileAsset = {\n    ...(isSanityFileAsset(src) ? src : {}),\n    _id,\n    _type: 'sanity.fileAsset',\n    assetId,\n    extension,\n    metadata: source.metadata || {},\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildFilePath(baseAsset, projectDetails),\n    url: buildFileUrl(baseAsset, projectDetails),\n  }\n}\n\n/**\n * See {@link getFileAsset}\n *\n * @inheritFrom {@link getFileAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFileAsset = getForgivingResolver(getFileAsset)\n\n/**\n * Tries to resolve the asset document ID from any inferrable structure\n *\n * @param src - Input source (image/file object, asset, reference, id, url, path)\n * @returns The asset document ID\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset document ID\n */\nexport function getAssetDocumentId(src: unknown): string {\n  const source = isAssetObjectStub(src) ? src.asset : src\n\n  let id = ''\n  if (typeof source === 'string') {\n    id = getIdFromString(source)\n  } else if (isReference(source)) {\n    id = source._ref\n  } else if (isAssetIdStub(source)) {\n    id = source._id\n  } else if (isAssetPathStub(source)) {\n    id = idFromUrl(`${cdnUrl}/${source.path}`)\n  } else if (isAssetUrlStub(source)) {\n    id = idFromUrl(source.url)\n  }\n\n  const hasId = id && idPattern.test(id)\n  if (!hasId) {\n    throw new UnresolvableError(src)\n  }\n\n  return id\n}\n\n/**\n * See {@link getAssetDocumentId}\n *\n * @inheritFrom {@link getAssetDocumentId}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetAssetDocumentId = getForgivingResolver(getAssetDocumentId)\n\n/**\n * Tries to cooerce a string (ID, URL or path) to an image asset ID\n *\n * @param str - Input string (ID, URL or path)\n * @returns string\n *\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getIdFromString(str: string): string {\n  if (idPattern.test(str)) {\n    // Already an ID\n    return str\n  }\n\n  const isAbsoluteUrl = cdnUrlPattern.test(str)\n  const path = isAbsoluteUrl ? new URL(str).pathname : str\n\n  if (path.indexOf('/images') === 0 || path.indexOf('/files') === 0) {\n    // Full URL\n    return idFromUrl(str)\n  }\n\n  if (pathPattern.test(str)) {\n    // Path\n    return idFromUrl(`${cdnUrl}/${str}`)\n  }\n\n  if (isFileAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/files/a/b/${str}`)\n  }\n\n  if (isImageAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/images/a/b/${str}`)\n  }\n\n  throw new UnresolvableError(str)\n}\n\n/**\n * See {@link getIdFromString}\n *\n * @inheritFrom {@link getIdFromString}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetIdFromString = getForgivingResolver(getIdFromString)\n\n/**\n * Converts from a full asset URL to just the asset document ID\n *\n * @param url - A full asset URL to convert\n * @returns string\n */\nfunction idFromUrl(url: string): string {\n  const path = getUrlPath(url)\n  const [type, , , fileName] = path.split('/')\n  const prefix = type.replace(/s$/, '')\n  return `${prefix}-${fileName.replace(/\\./g, '-')}`\n}\n\n/**\n * Resolves project ID and dataset the image belongs to, based on full URL or path\n * @param source - Image URL or path\n * @returns object | undefined\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getProject(src: SanityImageSource): SanityProjectDetails {\n  const path = tryGetAssetPath(src)\n  if (!path) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  const [, , projectId, dataset] = path.match(pathPattern) || []\n  if (!projectId || !dataset) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  return {projectId, dataset}\n}\n\n/**\n * See {@link getProject}\n *\n * @inheritFrom {@link getProject}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetProject = getForgivingResolver(getProject)\n\n/**\n * Returns whether or not the passed filename is a valid image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an image asset filename\n */\nexport function isImageAssetFilename(filename: string): boolean {\n  return imageAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is a file asset filename\n */\nexport function isFileAssetFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file or image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an asset filename\n */\nexport function isAssetFilename(filename: string): boolean {\n  return isImageAssetFilename(filename) || isFileAssetFilename(filename)\n}\n\n/**\n * Return whether or not the passed source is a file source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file source\n */\nexport function isFileSource(src: unknown): src is SanityFileSource {\n  const assetId = tryGetAssetDocumentId(src)\n  return assetId ? assetId.startsWith('file-') : false\n}\n\n/**\n * Return whether or not the passed source is an image source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is an image source\n */\nexport function isImageSource(src: unknown): src is SanityImageSource {\n  const assetId = tryGetAssetDocumentId(src)\n  return assetId ? assetId.startsWith('image-') : false\n}\n","import {getAssetUrlType} from './parse'\n\n/**\n * Checks whether or not a given URL is a valid Sanity asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity asset URL, false otherwise\n */\nexport function isSanityAssetUrl(url: string): boolean {\n  return getAssetUrlType(url) !== false\n}\n\n/**\n * Checks whether or not a given URL is a valid Sanity image asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity image asset URL, false otherwise\n */\nexport function isSanityImageUrl(url: string): boolean {\n  return getAssetUrlType(url) === 'image'\n}\n\n/**\n * Checks whether or not a given URL is a valid Sanity file asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity file asset URL, false otherwise\n */\nexport function isSanityFileUrl(url: string): boolean {\n  return getAssetUrlType(url) === 'file'\n}\n"],"names":["DEFAULT_CROP","Object","freeze","left","top","bottom","right","DEFAULT_HOTSPOT","x","y","height","width","getDefaultCrop","getDefaultHotspot","isDefaultCrop","crop","defaultTop","defaultBottom","defaultLeft","defaultRight","isDefaultHotspot","hotspot","defaultX","defaultY","defaultWidth","defaultHeight","UnresolvableError","inputSource","message","input","Error","isUnresolvableError","err","error","Boolean","unresolvable","getForgivingResolver","method","undefined","cdnUrl","cdnUrlPattern","fileAssetFilenamePattern","fileAssetIdPattern","imageAssetFilenamePattern","imageAssetIdPattern","pathPattern","idPattern","dummyProject","projectId","dataset","isReference","ref","isObject","_ref","isAssetIdStub","stub","_id","isAssetPathStub","path","isAssetUrlStub","url","isSanityFileAsset","src","_type","isSanityImageAsset","isImageAssetId","documentId","test","isFileAssetId","isAssetId","isAssetObjectStub","item","asset","obj","Array","isArray","buildImagePath","options","dimensions","metadata","originalFilename","assetId","extension","vanityFilename","vanity","getVanityStub","buildImageUrl","buildFilePath","buildFileUrl","project","hasPath","urlOrPath","tryGetUrlPath","tryGetAssetPath","getUrlPath","URL","pathname","replace","getUrlFilename","filename","isValidFilename","tryGetUrlFilename","useVanityName","exampleFileId","exampleImageId","parseAssetId","parseImageAssetId","parseFileAssetId","split","type","dimensionString","map","Number","parseAssetFilename","file","parseAssetUrl","match","projectPath","slice","length","parsed","parseImageAssetUrl","parseFileAssetUrl","getAssetUrlType","getImageDimensions","imageId","getAssetDocumentId","aspectRatio","tryGetImageDimensions","getExtension","isFileSource","getFile","getImage","tryGetExtension","projectDetails","tryGetProject","getImageAsset","img","tryGetImage","getProject","pathOptions","sourceObj","source","baseAsset","tryGetImageAsset","getFileAsset","tryGetFile","tryGetFileAsset","id","getIdFromString","idFromUrl","hasId","tryGetAssetDocumentId","str","isAbsoluteUrl","indexOf","isFileAssetFilename","isImageAssetFilename","tryGetIdFromString","fileName","prefix","isAssetFilename","startsWith","isImageSource","isSanityAssetUrl","isSanityImageUrl","isSanityFileUrl"],"mappings":"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"}